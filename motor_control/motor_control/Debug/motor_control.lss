
motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000884  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045a  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021c  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	char motor_right = 0x00;
	
	int cnt = 0;
	int data;
	
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  84:	e0 e8       	ldi	r30, 0x80	; 128
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);
  8e:	80 81       	ld	r24, Z
  90:	80 62       	ori	r24, 0x20	; 32
  92:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	80 83       	st	Z, r24
	
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
  ae:	e1 eb       	ldi	r30, 0xB1	; 177
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	80 83       	st	Z, r24
	
	PORTB = 0x00;
  b8:	15 b8       	out	0x05, r1	; 5
	
	//OCR1B = 10;
	//OCR2A = 10;
	
	UART_1_init(); // UART1 초기화
  ba:	0e 94 c9 00 	call	0x192	; 0x192 <UART_1_init>
	//char motor_left = 0x05;   // 0000 0'1'01
	//char motor_right = 0x28;  // 0010 '1'000
	char motor_left = 0x00;
	char motor_right = 0x00;
	
	int cnt = 0;
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	//char motor_left = 0x05;   // 0000 0'1'01
	//char motor_right = 0x28;  // 0010 '1'000
	char motor_left = 0x00;
	char motor_right = 0x00;
  c2:	d0 e0       	ldi	r29, 0x00	; 0

int main(void)
{
	//char motor_left = 0x05;   // 0000 0'1'01
	//char motor_right = 0x28;  // 0010 '1'000
	char motor_left = 0x00;
  c4:	c0 e0       	ldi	r28, 0x00	; 0
	
	//_delay_ms(1000);
	
	while(1)
	{
		if(cnt == 0){
  c6:	01 15       	cp	r16, r1
  c8:	11 05       	cpc	r17, r1
  ca:	61 f4       	brne	.+24     	; 0xe4 <main+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2a ea       	ldi	r18, 0xAA	; 170
  ce:	36 ee       	ldi	r19, 0xE6	; 230
  d0:	86 e9       	ldi	r24, 0x96	; 150
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	d9 f7       	brne	.-10     	; 0xd4 <main+0x54>
  de:	00 00       	nop
			_delay_ms(10000);
			cnt++;
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		PORTB = motor_left | motor_right;
  e4:	8c 2f       	mov	r24, r28
  e6:	8d 2b       	or	r24, r29
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	30 e7       	ldi	r19, 0x70	; 112
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x70>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x7a>
  fa:	00 00       	nop
		_delay_ms(50);
		PORTB = 0x00;
  fc:	15 b8       	out	0x05, r1	; 5
		data = UART1_receive();
  fe:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <UART1_receive>
 102:	90 e0       	ldi	r25, 0x00	; 0
		
		if(data == 'A'){ // up
 104:	81 34       	cpi	r24, 0x41	; 65
 106:	91 05       	cpc	r25, r1
 108:	61 f4       	brne	.+24     	; 0x122 <main+0xa2>
			OCR1B = 200;
 10a:	88 ec       	ldi	r24, 0xC8	; 200
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 112:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 200;  
 116:	88 ec       	ldi	r24, 0xC8	; 200
 118:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			motor_left = 0x05;  // 0000 0'1'01
			motor_right = 0x18; // 0001 '1'000
 11c:	d8 e1       	ldi	r29, 0x18	; 24
		
		if(data == 'A'){ // up
			OCR1B = 200;
			OCR2A = 200;  
			
			motor_left = 0x05;  // 0000 0'1'01
 11e:	c5 e0       	ldi	r28, 0x05	; 5
 120:	d2 cf       	rjmp	.-92     	; 0xc6 <main+0x46>
			motor_right = 0x18; // 0001 '1'000
		}
		else if(data == 'B'){ // down
 122:	82 34       	cpi	r24, 0x42	; 66
 124:	91 05       	cpc	r25, r1
 126:	61 f4       	brne	.+24     	; 0x140 <main+0xc0>
			OCR1B = 150;
 128:	86 e9       	ldi	r24, 0x96	; 150
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 130:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 150;
 134:	86 e9       	ldi	r24, 0x96	; 150
 136:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			motor_left = 0x06;  // 0000 0'1'10
			motor_right = 0x28; // 0010 '1'000
 13a:	d8 e2       	ldi	r29, 0x28	; 40
		}
		else if(data == 'B'){ // down
			OCR1B = 150;
			OCR2A = 150;
			
			motor_left = 0x06;  // 0000 0'1'10
 13c:	c6 e0       	ldi	r28, 0x06	; 6
 13e:	c3 cf       	rjmp	.-122    	; 0xc6 <main+0x46>
			motor_right = 0x28; // 0010 '1'000
		}
		else if(data == 'C'){ // left
 140:	83 34       	cpi	r24, 0x43	; 67
 142:	91 05       	cpc	r25, r1
 144:	59 f4       	brne	.+22     	; 0x15c <main+0xdc>
			OCR1B = 100;
 146:	84 e6       	ldi	r24, 0x64	; 100
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 14e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 100;
 152:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			motor_left = 0x06;
			motor_right = 0x18;
 156:	d8 e1       	ldi	r29, 0x18	; 24
			motor_right = 0x28; // 0010 '1'000
		}
		else if(data == 'C'){ // left
			OCR1B = 100;
			OCR2A = 100;
			motor_left = 0x06;
 158:	c6 e0       	ldi	r28, 0x06	; 6
 15a:	b5 cf       	rjmp	.-150    	; 0xc6 <main+0x46>
			motor_right = 0x18;
		}
		else if(data == 'D'){ // right
 15c:	84 34       	cpi	r24, 0x44	; 68
 15e:	91 05       	cpc	r25, r1
 160:	59 f4       	brne	.+22     	; 0x178 <main+0xf8>
			OCR1B = 100;
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 16a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 100;
 16e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			motor_left = 0x05;
			motor_right = 0x28;
 172:	d8 e2       	ldi	r29, 0x28	; 40
			motor_right = 0x18;
		}
		else if(data == 'D'){ // right
			OCR1B = 100;
			OCR2A = 100;
			motor_left = 0x05;
 174:	c5 e0       	ldi	r28, 0x05	; 5
 176:	a7 cf       	rjmp	.-178    	; 0xc6 <main+0x46>
			motor_right = 0x28;
		}
		else if(data == 'S'){
 178:	83 35       	cpi	r24, 0x53	; 83
 17a:	91 05       	cpc	r25, r1
 17c:	09 f0       	breq	.+2      	; 0x180 <main+0x100>
 17e:	a3 cf       	rjmp	.-186    	; 0xc6 <main+0x46>
			OCR1B = 0;
 180:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 184:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 0;
 188:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			motor_left = 0x00;
			motor_right = 0x00;
 18c:	d0 e0       	ldi	r29, 0x00	; 0
			motor_right = 0x28;
		}
		else if(data == 'S'){
			OCR1B = 0;
			OCR2A = 0;
			motor_left = 0x00;
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	9a cf       	rjmp	.-204    	; 0xc6 <main+0x46>

00000192 <UART_1_init>:
void UART1_transmit(char data)
{
	// 송신 가능 대기
	while(!(UCSR0A & (1 << UDRE0)));
	// 데이터 전송
	UDR0 = data;
 192:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 196:	80 e1       	ldi	r24, 0x10	; 16
 198:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 19c:	e0 ec       	ldi	r30, 0xC0	; 192
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 83       	st	Z, r24
 1a6:	e2 ec       	ldi	r30, 0xC2	; 194
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	e1 ec       	ldi	r30, 0xC1	; 193
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	80 83       	st	Z, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret

000001c2 <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	// Receive Complete 플래그 확인
	while(!(UCSR0A & (1 << RXC0)));
 1c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c6:	88 23       	and	r24, r24
 1c8:	e4 f7       	brge	.-8      	; 0x1c2 <UART1_receive>
	// Data Register 값 반환
	return UDR0;
 1ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
